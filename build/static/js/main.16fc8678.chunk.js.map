{"version":3,"sources":["styles.module.css","components/User/User.js","components/User/index.js","components/Statistics/Statistics.js","components/Statistics/index.js","components/FriendList/FriendList.js","components/FriendList/index.js","components/Transactions/Transactions.js","components/Transactions/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","User","avatar","location","name","tag","stats","followers","views","likes","className","styles","profile","description","src","alt","statsItem","label","quantity","Statistics","statiscticalData","map","data","divStyle","backgroundColor","Math","floor","random","toString","style","key","id","percentage","FriendList","friends","isOnline","width","Transactions","items","type","amount","currency","App","userList","transactions","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.16fc8678.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"styles_profile__3TLZA\",\"description\":\"styles_description__1CZIs\",\"avatar\":\"styles_avatar__1frs7\",\"name\":\"styles_name__2Jz6-\",\"tag\":\"styles_tag__1RlIR\",\"location\":\"styles_location__3GLdJ\",\"stats\":\"styles_stats__3ajnL\",\"statsItem\":\"styles_statsItem__141Lr\",\"label\":\"styles_label__1uCk8\",\"quantity\":\"styles_quantity__1udBl\"};","import React from 'react';\nimport styles from '../../styles.module.css';\n// eslint-disable-next-line\nimport PropTypes from 'prop-types';\n\nfunction User({ avatar, location, name, tag, stats: { followers, views, likes } }) {\n  return (\n    <div className={styles.profile}>\n      <div className={styles.description}>\n        <img src={avatar} alt=\"userAvatar\" className={styles.avatar} />\n        <div>\n          <p className={styles.name}>{name}</p>\n          <p className={styles.tag}>@{tag}</p>\n          <p className={styles.location}>{location}</p>\n        </div>\n      </div>\n      <ul className={styles.stats}>\n        <li className={styles.statsItem}>\n          <p className={styles.label}>{'followers'}</p>\n          <p className={styles.quantity}>{followers}</p>\n        </li>\n        <li className={styles.statsItem}>\n          <p className={styles.label}>{'views'}</p>\n          <p className={styles.quantity}>{views}</p>\n        </li>\n        <li className={styles.statsItem}>\n          <p className={styles.label}>{'likes'}</p>\n          <p className={styles.quantity}>{likes}</p>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nUser.propTypes = {\n  name: PropTypes.string.isRequired,\n  tag: PropTypes.string.isRequired,\n  location: PropTypes.string.isRequired,\n  avatar: PropTypes.string.isRequired,\n  stats: PropTypes.shape({\n    followers: PropTypes.number.isRequired,\n    views: PropTypes.number.isRequired,\n    likes: PropTypes.number.isRequired,\n  }).isRequired,\n};\n\nexport default User;\n","import User from './User.js';\n\nexport default User;","import React from 'react';\nimport statiscticalData from './statistical-data.json';\nimport './statistics.css';\n// eslint-disable-next-line\nimport PropTypes from 'prop-types';\n\nfunction Statistics() {\n  return (\n    <section className=\"statistics\">\n      <h2 className=\"title\">Upload stats</h2>\n      <ul className=\"stat-list\">\n        {statiscticalData.map(data => {\n          const randomColor = Math.floor(Math.random() * 16777215).toString(16);\n          const divStyle = { backgroundColor: '#' + randomColor };\n          return (\n            <li className=\"item\" style={divStyle} key={data.id}>\n              <span className=\"label\">{data.label}</span>\n              <span className=\"percentage\">{data.percentage}</span>\n            </li>\n          );\n        })}\n      </ul>\n    </section>\n  );\n}\n\nStatistics.propTypes = {\n  data: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired,\n    percentage: PropTypes.number.isRequired,\n  }).isRequired,\n};\n\nexport default Statistics;\n","import Statistics from './Statistics.js';\n\nexport default Statistics;\n","import React from 'react';\nimport './friends.css';\n// eslint-disable-next-line\nimport PropTypes from 'prop-types';\n\nfunction FriendList({ friends }) {\n  return (\n    <>\n      <ul className=\"friend-list\">\n        {friends.map(data => {\n          const { avatar, name, isOnline, id } = data;\n          return (\n            <li className=\"itemFriends\" key={id}>\n              <span className={isOnline ? 'statusIsOnline' : 'statusIsOffline'}></span>\n              <img className=\"avatar\" src={avatar} alt=\"\" width=\"48\" />\n              <p className=\"name\">{name}</p>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n}\n\nFriendList.propTypes = {\n\n    id: PropTypes.number.isRequired,\n    avatar: PropTypes.string,\n    name: PropTypes.string.isRequired,\nisOnline: PropTypes.bool.isRequired,\n};\n\nexport default FriendList;\n","import FriendList from './FriendList.js';\n\nexport default FriendList;\n","import React from 'react';\nimport './transactions.css';\n// eslint-disable-next-line\nimport PropTypes from 'prop-types';\n\nfunction Transactions({ items }) {\n  return (\n    <table className=\"transaction-history\">\n      <thead>\n        <tr>\n          <th>Type</th>\n          <th>Amount</th>\n          <th>Currency</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {items.map(data => {\n          const { id, type, amount, currency } = data;\n          return (\n            <tr key={id}>\n              <td>{type}</td>\n              <td>{amount}</td>\n              <td>{currency}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nTransactions.propTypes = {\n  id: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  amount: PropTypes.string.isRequired,\n  currency: PropTypes.string.isRequired,\n};\n\nexport default Transactions;\n","import Transactions from './Transactions.js';\n\nexport default Transactions;\n","import React from 'react';\nimport './App.css';\nimport User from './components/User';\nimport userList from './components/User/userList.json';\nimport Statistics from './components/Statistics';\nimport FriendList from './components/FriendList';\nimport friends from './components/FriendList/friends.json';\nimport Transactions from './components/Transactions';\nimport transactions from './components/Transactions/transactions.json';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <User {...userList} />\n      <Statistics />\n      <FriendList friends={friends} />\n      <Transactions items={transactions} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}